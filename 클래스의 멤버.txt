클래스가 상속을 받았다면 클래스에서 선언된 모든 멤버와 함께 상속받은 클래스에서
선언된 모든 멤버들(생성자 및 종료자 제외)도 클래스의 멤버에 포함됨

필드 : 클래스 또는 구조체에서 직접 선언되는 모든 형식의 변수, 기본 제공 형식 또는 다른 클래스의 인스턴스일 수 있음
상수 : 값이 컴파일 시간에 설정되며 변경할 수 없는 필드나 속성
속성 : 해당 클래스의 필드처럼 엑세스되는 클래스의 메소드로 객체 모르게 필드가 변경되지 않도록 할 수 있음
메소드 : 클래스가 수행하는 작업을 정의함, 입력으로 매개변수를 사용할 수 있으며, 매개변수를 통해 출력 데이터를
반환할 수 있음, 매개변수를 통하지 않고 직접 값을 반환할 수도 있음
이벤트 : 버튼 클릭, 성공적인 메소드 완료 등의 사건이 발생했을 때 알림을 다른 객체에 제공함, 대리자를 사용하여 정의 및 트리거됨
연산자 : 오버로드된 연산자는 클래스 멤버로 간주되며 클래스에서 public static 메소드로 정의함
인덱서 : 배열과 유사한 방식으로 객체를 인덱싱할 수 있음
생성자 : 객체를 처음 만들 때 호출하는 메소드, 보통 객체의 데이터를 초기화하는데 사용됨
소멸자 : C#에서 드물게 사용되며, 메모리에서 객체를 제거할 때 런타임 실행 엔진이 호출하는 메소드

필드 : 클래스에서 선언되는 모든 형식의 변수를 멤버 변수 혹은 필드(field)라고 함, 보통 소문자로 시작함
보통의 경우 캡슐화를 위해 private 또는 protected로 사용함, 인스턴스 필드와 정적 필드의 두 종류가 있음
인스턴스(객체) 필드 : 객체에 속한 필드로 객체의 이름과 함께 사용함, public string name;과 같이
[접근제한자][자료형][필드명]으로 생성하고"인스턴스.필드명"으로 사용됨
정적 필드(클래스 필드) : 클래스 이름과 함께 쓰이는 필드를 클래스 필드라고 함, 만들때는 static 키워드가 추가되며 사용할 때는
"[클래스 이름].[필드명]"으로 사용함

상수 : 컴파일 시간에 알려진 변경할 수 없는 값, 프로그램이 수행되는 동안 값을 변경하지 않는 경우에 사용함, const 한정자로 선언됨
C#의 기본 제공 형식(bool, byte, char, int, double, string 등)만 const로 선언할 수 있음, 클래스, 구조체 및 배열을 비롯한 사용자 정의 형식은
const가 될 수 없음, 상수를 초기화할 때 수식을 사용할 수도 있음, 클래스의 모든 인스턴스에 대해 상수 값이 같으므로 상수가 static 필드인 것처럼
"[클래스 이름].[상수명]"으로 엑세스함, static 키워드는 사용하지 않음;