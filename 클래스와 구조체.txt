클래스, 구조체 : .NET Framework의 공용 형식 시스템의 기본 구문, 각각은 기본적으로 하나의 논리 단위에 속하는 '데이터'및'동작'을 캡슐화하는 데이터 구조임
클래스나 구조체의 멤버는 데이터와 동작을 정의하며 필드, 메소드, 속성, 이벤트 등을 포함함
ex) 날짜를 구성하는 정보에는 년, 월, 일이 필요하며 이는 각각 정수로 표현 가능, 하나의 날짜를 표현할 때는 년, 월, 일이 다 필요하기 때문에 다음과 같이
구조체 또는 클래스로 만들어서 사용하는 것이 편리함

struct Date                                     class Date
{                                               {
    int year;                                       int year;
    int month;                                      int month;
    int day;                                        int day;
}                                               }

위와 같이 구조체나 클래스가 멤버 변수만을 포함하고 있다면(멤버 변수를 필드라고 함) 접근 한정자인 public 키워드를 사용해야 구조체나 클래스 밖에서도
그 멤버를 읽거나 수정할 수 있음
ex) C#에서의 구조체, 클래스의 모양

struct Date                                     class Date
{                                               {
    public year;                                    public year;
    public month;                                   public month;
    public day;                                     public day;
}                                               }

3개 변수가 모두 같은 int형이므로 다음과 같이 한 줄로 쓸 수도 있음

struct Date                                     class Date
{                                               {
    public int year, month, day;                    public int year, month, day;
}                                               }

정수형 변수 x를 만들 때 int x;라고 쓰는 것처럼 Date 구조체의 변수 birthDay는 Date birthDay;와 같이 만들 수 있음, 만일 Date가 클래스라면
참조형이기 때문에 반드시 new 키워드를 사용하여 만들어야함

Date birthDay;                  // 구조체
Date birthDay = new Date();     // 클래스의 객체

구조체와 클래스로 만들어지는 변수를 인스턴스, 즉 객체라고 함 위에 예에서 birthDay는 객체임

구조체는 new 키워드를 사용하거나 사용하지 않고 만들 수 있음, new 키워드를 사용해서 클래스나 구조체의 객체를 만들면 필드가 모두 디폴트 값으로 초기화 됨

birthDay의 세 개 필드는 모두 정수이므로 정수의 디폴트 값인 0으로 초기화됨, 객체의 필드는 birthDay.year, birthDay.month, birthDay.day와 같이 멤버연산자(.)을
사용하여 접근할 수 있음

구조체와 클래스는
1. 클래스 안
2. 같은 파일 안에서 클래스 밖
3. 다른 파일
세 가지 위치에 만들 수 있음, 클래스 안에 만들면 그 구조체나 클래스는 자기를 포함하고 있는 클래스 안에서만 사용 가능, 다른 파일에 클래스나 구조체를 만들 때는
그 파일이 같은 프로젝트 안에 있어야 함

ex) Person은 클래스 이름, p와 q는 Person 클래스의 객체임, 클래스는 참조형식이므로 클래스의 객체는 해당 메모리에 대한 참조만 가짐, q = p와 같이 객체가 다른
객체에 할당되면 새 객체도 동일한 메모리를 참조하게 되며, 한 객체의 값을 바꾸면 다른 객체의 값도 바꿈
class Person {       // 멤버 변수(필드), 속성, 메소드, 이벤트 등이 정의됨
}
Person p = new Person();    // 인스턴스(객체) p가 만들어 짐
Person q = p;               // 인스턴스(객체) q가 만들어 짐

구조체와 클래스의 중요한 차이는 구조체가 값 형식이라는 점, 구조체가 만들어지면 구조체 변수에 참조가 아닌 실제 데이터가 할당됨, t = s와 같이 구조체를 새 변수에
할당하면 구조체가 통째로 복사됨, 이 경우 s의 값을 바꾸어도 t의 값은 바뀌지 않음

struct Student {
    ···
}
Student s = new Student();
Student t = s;

일반적으로 클래스는 좀 더 복잡한 동작이나 객체를 만든 후 수정하려는 데이터를 모델링하는데 사용됨, 구조체는 만든 후에 수정하지 않으려는 데이터를 포함하는 작은
데이터 구조에 적합함

구조체와 클래스 비교, 정리:
(1) 구조체와 클래스는 class와 struct 키워드만 빼고 구문이 같음
(2) 구조체는 값형, 클래스는 참조형, 즉 구조체는 메모리에 스택 영역에 공간을 갖게 되고 클래스는 스택에 참조만 위치하게 됨, 클래스는 반드시 new 키워드를
    사용하여 객체를 생성함.
(3) 구조체와 클래스 모두 세 가지 위치에 만들 수 있음(1. 클래스 안, 2. 같은 파일 안에서 클래스 밖, 3. 다른 파일)
(4) 구조체와 클래스 모두 new 키워드로 만들 수 있음, 이 경우 필드의 값들이 모두 디폴트 값으로 초기화 됨